#include <stdio.h>
#include<iostream>
#include <cstdlib>
#include <stdlib.h>
#include<string.h>
#include<string>
#include <sstream>
#include <bits/stdc++.h>
#include <stdlib.h>
using namespace std;

#define NULL_VALUE -999999
#define Infinity 99999
FILE *in, *out;
#define BUF 1000
#define OUT 0
#define IN 1

#define NULL_VALUE -999999
#define Infinity 99999
//FILE *in, *out;

int **distance;
int totalPenalty = 0;
bool compare(int a, int b)
{
    return b>a;

}

bool Compare(int u, int v);
class ArrayList
{
    int *list;
    int length;
    int listMaxSize;
    int listInitSize;

public:
    ArrayList();
    ~ArrayList();
    int searchItem(int item);
    void insertItem(int item);
    void removeItem(int item);
    void removeItemAt(int item);
    int getItem(int position);
    int getLength();
    bool empty();
    void printList();
};

ArrayList::ArrayList()
{
    listInitSize = 2;
    listMaxSize = listInitSize;
    list = new int[listMaxSize];
    length = 0;
}

void ArrayList::insertItem(int newitem)
{
    int *tempList;
    if (length == listMaxSize)
    {
        //allocate new memory space for tempList
        listMaxSize = 2 * listMaxSize;
        tempList = new int[listMaxSize];
        int i;
        for (i = 0; i < length; i++)
        {
            tempList[i] = list[i]; //copy all items from list to tempList
        }
        delete[] list;   //free the memory allocated before
        list = tempList; //make list to point to new memory
    };

    list[length] = newitem; //store new item
    length++;
}

int ArrayList::searchItem(int item)
{
    int i = 0;
    for (i = 0; i < length; i++)
    {
        if (list[i] == item)
            return i;
    }
    return NULL_VALUE;
}

int ArrayList::getItem(int position)
{
    if (position < 0 || position >= length)
        return NULL_VALUE;
    return list[position];
}

int ArrayList::getLength()
{
    return length;
}

bool ArrayList::empty()
{
    if (length == 0)
        return true;
    else
        return false;
}

void ArrayList::printList()
{
    int i;
    for (i = 0; i < length; i++)
        printf("%d ", list[i]);
    printf("Current size: %d, current length: %d\n", listMaxSize, length);
}

ArrayList::~ArrayList()
{
    if (list)
        delete[] list;
    list = 0;
}

//******************ArrayList class ends here*************************

//******************Graph class starts here**************************
class Graph
{
    int nVertices, nEdges;
    bool directed;
    ArrayList *adjList;
    int *result;

public:
    Graph();
    ~Graph();
    void setnVertices(int n);
    void addEdge(int u, int v, int w);
    int getDegree(int u);
    int getDist(int u, int v);
    void printGraph();
    int **weight;
    int *distance;
    bool bellmanford(int src);
    void FloydWarshal();
    void GraphColoring(int max_degree);
    int getResult(int node);
    bool Compare (int &u,int &v)const;
};

Graph::Graph()
{
    nVertices = 0;
    nEdges = 0;
    adjList = 0;
    weight = 0;
    directed = true;
}

void Graph::setnVertices(int n)
{
    this->nVertices = n;
    if (adjList != 0)
        delete[] adjList; //delete previous list
    adjList = new ArrayList[nVertices + 1];
    distance = new int[nVertices];
    weight = new int *[nVertices];
    result = new int[nVertices];
    for (int i = 0; i < nVertices; i++)
        weight[i] = new int[nVertices];
}

void Graph::addEdge(int u, int v, int w)
{
    if (u < 0 || v < 0 || u >= nVertices || v >= nVertices)
        return; //vertex out of range
    this->nEdges++;
    adjList[u].insertItem(v);
    weight[u][v] = w;
}

int Graph::getDegree(int u)
{
    return adjList[u].getLength();
}
bool Graph :: Compare (int &u,int &v) const
{
    return adjList[u].getLength()>adjList[v].getLength();

}
int Graph :: getResult(int node)
{
    return result[node];
}

void Graph::printGraph()
{
    printf("\nNumber of vertices: %d, Number of edges: %d\n", nVertices, nEdges);
    for(int i=0; i<nVertices; i++)
    {
        printf("%d:", i);
        for(int j=0; j<adjList[i].getLength(); j++)
        {
            int a = adjList[i].getItem(j);
            //if(weight[i][a]>0)
            printf(" %d", adjList[i].getItem(j));


        }
        printf("\n");
    }
}
void Graph:: GraphColoring(int max_degree)
{
    int order[nVertices];
    for( int i=0;i<nVertices;i++){
      order[i]=i;

    }
    int n = sizeof(order)/sizeof(order[0]);

    sort(order,order+n,Compare);

    result[0]  = 0;

    for (int u = 0; u < nVertices; u++)
    {
        if(u == max_degree)
        {
            result[u] = 0;
        }
        else
        {
            result[u] = -1;
        }
    }


    bool available[nVertices];
    for (int cr = 0; cr < nVertices; cr++)
        available[cr] = false;

    for (int u = 0; u < nVertices; u++)
    {

        for (int i=0; i<adjList[u].getLength(); i++)
            if (result[i] != -1)
                available[result[i]] = true;
        int cr;
        for (cr = 0; cr < nVertices; cr++)
            if (available[cr] == false)
                break;
        result[u] = cr;

        for (int i=0; i<adjList[u].getLength(); i++)
            if (result[i] != -1)
                available[result[i]] = false;
    }


    for (int u = 0; u < nVertices; u++)
        cout << "Course No : " << u << " ---> Day : "
             << result[u] << endl;

}

Graph::~Graph()
{
    delete[] adjList;
    delete[] distance;
    nVertices = 0;
    nEdges = 0;
    adjList = 0;
    weight = 0;
    directed = false;
}
//*



//**********************Graph class ends here******************************
/// .................... ..................................for reading Course file ................................................................
int CourseFile_read(char *filename)
{
    FILE *fp;
    int nexams=0, examid=0, nstudconf=0;

    //fprintf(stdout, "Reading file %s...\n", filename);
    fp = fopen(filename, "r");
    if(fp==NULL)
    {
        //fprintf(stderr, "Error: can't open file %s\n", filename);
        exit(-1);
    }

    //reading of .exm to know how many exams there are
    while(fscanf(fp, "%d %d", &examid, &nstudconf)!=EOF)
    {
        nexams++;
        printf("%d %d\n",examid,nstudconf);
    }


    fclose(fp);
    //fprintf(stdout, "Done\n\n");
    printf("%d\n",nexams);

    return nexams;
}



/// ....................................... for reading student file ................................................................................
int **studentFile_read(char *filename, int *nstudents, int nexams)
{
    FILE *fp,*out;
    string words;
    int number = 0;
    // out = fopen("Output.txt", "w");
    int i=0, j=0, examid1=0, tmp_dim=1000, **table_schedule;
    int examid[20];
    char studentid[BUF], student_tmp[BUF]=" ";

    //fprintf(stdout, "Reading file %s...\n", filename);
    fp = fopen(filename, "r");
    if(fp==NULL)
    {
        //fprintf(stderr, "Error: can't open file %s\n", filename);
        exit(-2);
    }

    table_schedule = (int**)malloc(tmp_dim*sizeof(int*));
    for(i=0; i<tmp_dim; i++)
    {
        table_schedule[i] = (int*)malloc(nexams*sizeof(int));
        for(j=0; j<nexams; j++)
            table_schedule[i][j]=0;
    }

    //reading of .stu to fill table_schedule
    string item_name;
    ifstream nameFileout;
    nameFileout.open(filename);
    string line;
    (*nstudents)++;
    while(std::getline(nameFileout, line))
    {
        (*nstudents)++;
        int index = 0;
        istringstream ss(line);
        do
        {
            string word;
            ss >> word;
            stringstream geek(word);

            int x;
            geek >> x;
            examid[index] = x;
            index++;
            //cout << "Value of x : " << examid[index]<< endl;


        }
        while (ss);

        if((*nstudents)==tmp_dim)  // menage reallocation
        {
            tmp_dim = tmp_dim*2;
            table_schedule = (int**)realloc(table_schedule, tmp_dim*sizeof(int*));
            for(i=(*nstudents); i<tmp_dim; i++)
            {
                table_schedule[i] = (int*)malloc(nexams*sizeof(int));
                for(j=0; j<nexams; j++)
                    table_schedule[i][j]=0;
            }
        }

        for (int  i=0; i<index; i++)
        {
            table_schedule[(*nstudents)][examid[i]]=1;
        }



        strcpy(student_tmp, studentid);
    }
    printf("Total Student No : %d \n",(*nstudents));

    fclose(fp);
    //fprintf(stdout, "Done\n\n");

    return table_schedule;


}
/// .........................................................penalty Count...........................
void Penalty( int a, int b)
{
    int diff = std::abs(a-b);
    //printf("%d\n",diff);
    switch(diff)
    {
    case 1:
        totalPenalty = totalPenalty+16;
        break;
    case 2:
        totalPenalty =  totalPenalty+8;
        break;
    case 3:
        totalPenalty = totalPenalty+4;
        break;
    case 4:
        totalPenalty = totalPenalty+2;
        break;
    case 5:
        totalPenalty = totalPenalty+1;
        break;
    default:
        break;
    }
    //printf("%d --",totalPenalty);


}
int main()
{
    out = fopen("Output.txt", "w");
    int **table_schedule, **conflicts;

    int i=0, j=0, k=0, number_exams=0, nstudents=-1, nstudconf=0;
    number_exams = CourseFile_read("yor-f-83.crs");
    table_schedule = studentFile_read("yor-f-83.stu", &nstudents, number_exams);           /// for defining student and its courses
    ///...................................... conflict count ..........................................
    conflicts = (int**)malloc((number_exams+1)*sizeof(int*));
    for(i=0; i<number_exams; i++)
        conflicts[i] = (int*)malloc((number_exams+1)*sizeof(int));

    for(j=0; j<number_exams; j++)
    {
        for(k=0; k<number_exams; k++)
        {
            nstudconf=0;
            for(i=1; i<=nstudents; i++)
            {
                if(table_schedule[i][j]==1 && table_schedule[i][k]==1 && j!=k)
                    nstudconf++;
            }
            conflicts[j][k]=nstudconf;
            fprintf(out,"%d -- %d  : %d\n",j,k,nstudconf);
            //cout << "Conflicts between :"<< j << " and " << k  << "  --"<< nstudconf<< endl;
        }
    }
    /// ..............................................Graph Declaration....................................
    Graph g;
    //printf("Number Of exam == %d",number_exams);
    g.setnVertices(number_exams);
    for(j=0; j<number_exams; j++)
    {
        for(k=0; k<number_exams; k++)
        {
            if( conflicts[j][k]>0)
            {
                g.addEdge(j, k, conflicts[j][k]);

            }

        }
    }
    int max_degree=0;
    int mx;
    for(j=0; j<number_exams; j++)
    {
        //printf("%d ---",g.getDegree(j));
        if(j>0)
        {
            if(g.getDegree(j)>max_degree)
            {
                max_degree = g.getDegree(j);
                mx = j;
                //printf("%d--(%d)",g.getDegree(j),j);
            }
        }

    }

    g.GraphColoring(mx);
    //printf("%d - %d \n",g.getResult(0),g.getResult(2));
    for(j=0; j<number_exams; j++)
    {
        for(k=(j+1); k<number_exams; k++)
        {
            //printf("%d:    %d - %d = %d \n",j,g.getResult(j),g.getResult(k),std::abs(g.getResult(j)-g.getResult(k)));
            Penalty(g.getResult(j),g.getResult(k));
        }
    }
    printf(" Total Penalty = %d\n",totalPenalty);
    cout << nstudents;
    double res = totalPenalty/nstudents;

    cout << " Average Penalty : "<< res<< endl;


    //g.printGraph();

}
